int : KeyWord, (3, 1)
gcd : Identifier, (3, 5)
( : Delimiter, (3, 8)
int : KeyWord, (3, 9)
u : Identifier, (3, 13)
, : Delimiter, (3, 14)
int : KeyWord, (3, 16)
v : Identifier, (3, 20)
) : Delimiter, (3, 21)
{ : Delimiter, (3, 23)
int : KeyWord, (4, 2)
k : Identifier, (4, 6)
; : Delimiter, (4, 7)
k : Identifier, (5, 2)
= : Operator, (5, 4)
u : Identifier, (5, 6)
/ : Operator, (5, 7)
u : Identifier, (5, 8)
+ : Operator, (5, 9)
v : Identifier, (5, 10)
* : Operator, (5, 11)
v : Identifier, (5, 12)
/ : Operator, (5, 13)
u : Identifier, (5, 14)
; : Delimiter, (5, 15)
if : KeyWord, (6, 2)
( : Delimiter, (6, 4)
k : Identifier, (6, 5)
> : Operator, (6, 7)
8 : Constant, (6, 9)
) : Delimiter, (6, 10)
{ : Delimiter, (6, 12)
return : KeyWord, (7, 3)
u : Identifier, (7, 10)
; : Delimiter, (7, 11)
} : Delimiter, (8, 2)
else : KeyWord, (9, 2)
{ : Delimiter, (9, 7)
return : KeyWord, (10, 3)
v : Identifier, (10, 10)
; : Delimiter, (10, 11)
} : Delimiter, (11, 2)
} : Delimiter, (12, 1)
void : KeyWord, (14, 1)
main : Identifier, (14, 6)
( : Delimiter, (14, 10)
void : KeyWord, (14, 11)
) : Delimiter, (14, 15)
{ : Delimiter, (15, 1)
int : KeyWord, (16, 2)
x : Identifier, (16, 6)
; : Delimiter, (16, 7)
int : KeyWord, (16, 9)
y : Identifier, (16, 13)
; : Delimiter, (16, 14)
int : KeyWord, (16, 16)
z : Identifier, (16, 20)
; : Delimiter, (16, 21)
x : Identifier, (17, 2)
= : Operator, (17, 4)
input : Identifier, (17, 6)
( : Delimiter, (17, 11)
) : Delimiter, (17, 12)
; : Delimiter, (17, 13)
y : Identifier, (18, 2)
= : Operator, (18, 4)
input : Identifier, (18, 6)
( : Delimiter, (18, 11)
) : Delimiter, (18, 12)
; : Delimiter, (18, 13)
z : Identifier, (19, 2)
= : Operator, (19, 4)
input : Identifier, (19, 6)
( : Delimiter, (19, 11)
) : Delimiter, (19, 12)
; : Delimiter, (19, 13)
while : KeyWord, (20, 2)
( : Delimiter, (20, 7)
x : Identifier, (20, 8)
< : Operator, (20, 10)
10 : Constant, (20, 12)
) : Delimiter, (20, 14)
{ : Delimiter, (20, 16)
x : Identifier, (21, 3)
= : Operator, (21, 5)
x : Identifier, (21, 7)
+ : Operator, (21, 9)
1 : Constant, (21, 11)
; : Delimiter, (21, 12)
while : KeyWord, (22, 3)
( : Delimiter, (22, 8)
y : Identifier, (22, 9)
>= : Operator, (22, 11)
10 : Constant, (22, 14)
) : Delimiter, (22, 16)
{ : Delimiter, (22, 18)
y : Identifier, (23, 4)
= : Operator, (23, 6)
y : Identifier, (23, 8)
- : Operator, (23, 10)
1 : Constant, (23, 12)
; : Delimiter, (23, 13)
} : Delimiter, (24, 3)
if : KeyWord, (26, 3)
( : Delimiter, (26, 5)
z : Identifier, (26, 6)
!= : Operator, (26, 8)
x : Identifier, (26, 11)
+ : Operator, (26, 13)
y : Identifier, (26, 15)
) : Delimiter, (26, 16)
{ : Delimiter, (26, 18)
z : Identifier, (27, 4)
= : Operator, (27, 6)
x : Identifier, (27, 8)
+ : Operator, (27, 10)
y : Identifier, (27, 12)
; : Delimiter, (27, 13)
} : Delimiter, (28, 3)
} : Delimiter, (29, 2)
return : KeyWord, (30, 2)
z : Identifier, (30, 9)
; : Delimiter, (30, 10)
} : Delimiter, (31, 1)
